module.exports = {
  config: {
    name: "artxl",
    version: "1.0",
    author: "Zetsu",
    description: "Transform images",
    usage: "Transform images provided as attachments.",
    category: "Image-Edit",
    cooldowns: 2,
  },

  onStart: async function ({ api, event, args }) {
    try {
      const axios = require("axios");
      const fs = require("fs");
      const path = require("path");

      let imageUrl;
      let prompt = "same picture";
      let modelIndex = 0;

      // Parsing command arguments
      if (args.length > 0) {
        prompt = args.join(" ");
        if (args.includes("|")) {
          const index = args.indexOf("|");
          prompt = args.slice(0, index).join(" ").trim();
          modelIndex = parseInt(args[index + 1].trim(), 10);
        }
      }

      let width, height;

      if (prompt.toLowerCase() === "guide") {
        const usim = "‚óâ ùêÜùêîùêàùêÉùêÑ ùêÄùêëùêìùêóùêã :\n\n (En r√©ponse √† une image) ùòºùôßùô©ùô≠ùô° ùò±ùò≥ùò∞ùòÆùò±ùòµ | ùòÆùò∞ùò•ùò¶ùò≠(ùü¨-9)\n\‚óâ ùêèùê®ùêÆùê´ ùêØùê®ùê¢ùê´ ùê•ùêûùê¨ ùê¶ùê®ùêùùêûùê•ùê¨ ùêùùê¢ùê¨ùê©ùê®ùêßùê¢ùêõùê•ùêûùê¨ : \n [ùòºùôßùô©ùô≠ùô° ùô¢ùô§ùôôùôöùô°]";
        return api.sendMessage(usim, event.threadID, event.messageID);
      }

      if (prompt.toLowerCase() === "model") {
        const modelList = "‚óâ ùêåùêéùêÉùêÑùêãùêí ùêÄùêëùêìùêóùêã ùêÉùêàùêíùêèùêéùêçùêàùêÅùêãùêÑùêí ‚óâ\n\n 0 | AnimagineXLV3\n1 | RealvisxlV40\n2 | DreamshaperXL10\n3 | DynavisionXL\n4 | JuggernautXL\n5 | RealismEngineSDXL\n6 | Sd_xl_base\n7 | Sd_xl_base_1.0_inpainting\n8 | TurbovisionXL\n9 | Devlish Photorealism V1.5";
        return api.sendMessage(modelList, event.threadID, event.messageID);
      }

      if (event.type === "message_reply" && event.messageReply.attachments && event.messageReply.attachments[0]) {
        if (["photo", "sticker"].includes(event.messageReply.attachments[0].type)) {
          api.setMessageReaction('üñåÔ∏è', event.messageID, () => {}, true);
          imageUrl = event.messageReply.attachments[0].url;
          width = event.messageReply.attachments[0].width;
          height = event.messageReply.attachments[0].height;

          // Adjust width and height if they are outside the acceptable range
          const aspectRatio = width / height;
          if (width > 1536 || height > 1536) {
            if (width > height) {
              width = 1536;
              height = Math.floor(1536 / aspectRatio);
            } else {
              height = 1536;
              width = Math.floor(1536 * aspectRatio);
            }
          } else if (width < 512 || height < 512) {
            if (width < height) {
              width = 512;
              height = Math.floor(512 / aspectRatio);
            } else {
              height = 512;
              width = Math.floor(512 * aspectRatio);
            }
          }
        } else {
          return api.sendMessage({ body: "‚ùå | Vous devez r√©pondre √† une image\n\nùêíùêöùê¢ùê¨ùê¢ùê¨ùê¨ùêûùê≥ [ùóîùóøùòÅùòÖùóπ ùó¥ùòÇùó∂ùó±ùó≤] ùê©ùê®ùêÆùê´ ùê¶ùê¢ùêûùêÆùê± ùêúùê®ùê¶ùê©ùê´ùêûùêßùêùùê´ùêû ùêúùêûùê≠ùê≠ùêû ùêúùê®ùê¶ùê¶ùêöùêßùêùùêû." }, event.threadID);
        }
      } else if (args[0]?.match(/(https?:\/\/.*\.(?:png|jpg|jpeg))/g)) {
        imageUrl = args[0];
      } else {
        return api.sendMessage({ body: "‚ùå | Vous devez r√©pondre √† une image\n\nùêíùêöùê¢ùê¨ùê¢ùê¨ùê¨ùêûùê≥ [ùóîùóøùòÅùòÖùóπ ùó¥ùòÇùó∂ùó±ùó≤] ùê©ùê®ùêÆùê´ ùê¶ùê¢ùêûùêÆùê± ùêúùê®ùê¶ùê©ùê´ùêûùêßùêùùê´ùêû ùêúùêûùê≠ùê≠ùêû ùêúùê®ùê¶ùê¶ùêöùêßùêùùêû." }, event.threadID);
      }

      // Create the API URL using adjusted width and height
      const apiUrl = `https://zet4k.onrender.com/generate?imageUrl=${encodeURIComponent(imageUrl)}&prompt=${encodeURIComponent(prompt)}&modelIndex=${modelIndex}&width=${width}&height=${height}`;

      const response = await axios.get(apiUrl, { responseType: "stream" });

      const cacheFolderPath = path.join(__dirname, "cache");
      if (!fs.existsSync(cacheFolderPath)) {
        fs.mkdirSync(cacheFolderPath);
      }

      const imagePath = path.join(cacheFolderPath, `generated.png`);

      const writer = fs.createWriteStream(imagePath);
      response.data.pipe(writer);

      writer.on("finish", () => {
        const stream = fs.createReadStream(imagePath);
        api.setMessageReaction('‚úÖ', event.messageID, () => {}, true);
        return api.sendMessage({
          body: "ùó©ùóºùòÅùóøùó≤ ùó∂ùó∫ùóÆùó¥ùó≤ ùó≤ùòÄùòÅ ùóΩùóøùó≤ùòÅùó≤ ! ‚≠ê",
          attachment: stream
        }, event.threadID, event.messageID);
      });

      writer.on("error", (err) => {
        console.error("Stream error:", err);
        api.sendMessage("‚ùå | Failed to generate image.", event.threadID, event.messageID);
      });
    } catch (error) {
      console.error("Error:", error);
      api.sendMessage("‚ùå | An error occurred while running the command.", event.threadID, event.messageID);
    }
  }
};
